generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alternative_v2 {
  id             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description    String?     @db.VarChar
  quantity       Int?        @default(0)
  question_v2_fk String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  question_v2    question_v2? @relation(fields: [question_v2_fk], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comment {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content     String?  @db.VarChar
  question_fk String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  question    question @relation(fields: [question_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model comment_v2 {
  id             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content        String?     @db.VarChar
  question_v2_fk String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  question_v2    question_v2? @relation(fields: [question_v2_fk], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model question {
  id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  option1 String    @db.VarChar
  option2 String    @db.VarChar
  vote1   Int?
  vote2   Int?
  comment comment[]
}

model question_v2 {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  alternative_v2 alternative_v2[]
  comment_v2     comment_v2[]
}
